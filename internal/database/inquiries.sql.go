// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: inquiries.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createInquiry = `-- name: CreateInquiry :one
INSERT INTO inquiries (id, listing_id, sender_id)
VALUES ($1, $2, $3)
RETURNING id, listing_id, sender_id, status, created_at, updated_at
`

type CreateInquiryParams struct {
	ID        uuid.UUID
	ListingID uuid.NullUUID
	SenderID  uuid.NullUUID
}

func (q *Queries) CreateInquiry(ctx context.Context, arg CreateInquiryParams) (Inquiry, error) {
	row := q.db.QueryRowContext(ctx, createInquiry, arg.ID, arg.ListingID, arg.SenderID)
	var i Inquiry
	err := row.Scan(
		&i.ID,
		&i.ListingID,
		&i.SenderID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInquiriesByListing = `-- name: DeleteInquiriesByListing :exec
DELETE FROM inquiries WHERE listing_id = $1
`

func (q *Queries) DeleteInquiriesByListing(ctx context.Context, listingID uuid.NullUUID) error {
	_, err := q.db.ExecContext(ctx, deleteInquiriesByListing, listingID)
	return err
}

const deleteInquiry = `-- name: DeleteInquiry :exec
DELETE FROM inquiries WHERE id = $1 AND sender_id = $2
`

type DeleteInquiryParams struct {
	ID       uuid.UUID
	SenderID uuid.NullUUID
}

func (q *Queries) DeleteInquiry(ctx context.Context, arg DeleteInquiryParams) error {
	_, err := q.db.ExecContext(ctx, deleteInquiry, arg.ID, arg.SenderID)
	return err
}

const getInquiriesByListing = `-- name: GetInquiriesByListing :many
SELECT id, listing_id, sender_id, status, created_at, updated_at FROM inquiries WHERE listing_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetInquiriesByListing(ctx context.Context, listingID uuid.NullUUID) ([]Inquiry, error) {
	rows, err := q.db.QueryContext(ctx, getInquiriesByListing, listingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Inquiry
	for rows.Next() {
		var i Inquiry
		if err := rows.Scan(
			&i.ID,
			&i.ListingID,
			&i.SenderID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInquiriesByUser = `-- name: GetInquiriesByUser :many
SELECT id, listing_id, sender_id, status, created_at, updated_at FROM inquiries WHERE sender_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetInquiriesByUser(ctx context.Context, senderID uuid.NullUUID) ([]Inquiry, error) {
	rows, err := q.db.QueryContext(ctx, getInquiriesByUser, senderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Inquiry
	for rows.Next() {
		var i Inquiry
		if err := rows.Scan(
			&i.ID,
			&i.ListingID,
			&i.SenderID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInquiryStatus = `-- name: UpdateInquiryStatus :exec
UPDATE inquiries SET status = $2 WHERE id = $1
`

type UpdateInquiryStatusParams struct {
	ID     uuid.UUID
	Status sql.NullString
}

func (q *Queries) UpdateInquiryStatus(ctx context.Context, arg UpdateInquiryStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateInquiryStatus, arg.ID, arg.Status)
	return err
}
