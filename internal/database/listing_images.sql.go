// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: listing_images.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addListingImage = `-- name: AddListingImage :one
INSERT INTO listing_images (id, listing_id, url, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, listing_id, url, created_at, updated_at
`

type AddListingImageParams struct {
	ID        uuid.UUID
	ListingID uuid.UUID
	Url       string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) AddListingImage(ctx context.Context, arg AddListingImageParams) (ListingImage, error) {
	row := q.db.QueryRowContext(ctx, addListingImage,
		arg.ID,
		arg.ListingID,
		arg.Url,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ListingImage
	err := row.Scan(
		&i.ID,
		&i.ListingID,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteListingImageByID = `-- name: DeleteListingImageByID :exec
DELETE FROM listing_images WHERE id = $1
`

func (q *Queries) DeleteListingImageByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteListingImageByID, id)
	return err
}

const getListingImages = `-- name: GetListingImages :many
SELECT id, listing_id, url, created_at, updated_at FROM listing_images WHERE listing_id = $1
`

func (q *Queries) GetListingImages(ctx context.Context, listingID uuid.UUID) ([]ListingImage, error) {
	rows, err := q.db.QueryContext(ctx, getListingImages, listingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListingImage
	for rows.Next() {
		var i ListingImage
		if err := rows.Scan(
			&i.ID,
			&i.ListingID,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
