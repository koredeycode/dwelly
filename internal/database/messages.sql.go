// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: messages.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages WHERE id = $1 AND sender_id = $2
`

type DeleteMessageParams struct {
	ID       uuid.UUID
	SenderID uuid.UUID
}

func (q *Queries) DeleteMessage(ctx context.Context, arg DeleteMessageParams) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, arg.ID, arg.SenderID)
	return err
}

const deleteMessagesByInquiry = `-- name: DeleteMessagesByInquiry :exec
DELETE FROM messages WHERE inquiry_id = $1
`

func (q *Queries) DeleteMessagesByInquiry(ctx context.Context, inquiryID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMessagesByInquiry, inquiryID)
	return err
}

const getMessagesByInquiry = `-- name: GetMessagesByInquiry :many
SELECT id, inquiry_id, sender_id, content, created_at, updated_at FROM messages
WHERE inquiry_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetMessagesByInquiry(ctx context.Context, inquiryID uuid.UUID) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByInquiry, inquiryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.InquiryID,
			&i.SenderID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sendMessage = `-- name: SendMessage :one
INSERT INTO messages (id, inquiry_id, sender_id, content, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, inquiry_id, sender_id, content, created_at, updated_at
`

type SendMessageParams struct {
	ID        uuid.UUID
	InquiryID uuid.UUID
	SenderID  uuid.UUID
	Content   string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) SendMessage(ctx context.Context, arg SendMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, sendMessage,
		arg.ID,
		arg.InquiryID,
		arg.SenderID,
		arg.Content,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.InquiryID,
		&i.SenderID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
