// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: listings.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createListing = `-- name: CreateListing :one
INSERT INTO listings (id, user_id, intent, title, description, price, location, category, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, user_id, intent, title, description, price, location, category, status, created_at, updated_at
`

type CreateListingParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Intent      string
	Title       string
	Description string
	Price       string
	Location    string
	Category    string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateListing(ctx context.Context, arg CreateListingParams) (Listing, error) {
	row := q.db.QueryRowContext(ctx, createListing,
		arg.ID,
		arg.UserID,
		arg.Intent,
		arg.Title,
		arg.Description,
		arg.Price,
		arg.Location,
		arg.Category,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Listing
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Intent,
		&i.Title,
		&i.Description,
		&i.Price,
		&i.Location,
		&i.Category,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteListing = `-- name: DeleteListing :exec
DELETE FROM listings WHERE id = $1 AND user_id = $2
`

type DeleteListingParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteListing(ctx context.Context, arg DeleteListingParams) error {
	_, err := q.db.ExecContext(ctx, deleteListing, arg.ID, arg.UserID)
	return err
}

const getListingByID = `-- name: GetListingByID :one
SELECT listings.id, listings.user_id, listings.intent, listings.title, listings.description, listings.price, listings.location, listings.category, listings.status, listings.created_at, listings.updated_at, listing_images.url FROM
listings 
LEFT JOIN listing_images ON listings.id = listing_images.listing_id
WHERE listings.id = $1
`

type GetListingByIDRow struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Intent      string
	Title       string
	Description string
	Price       string
	Location    string
	Category    string
	Status      string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Url         sql.NullString
}

func (q *Queries) GetListingByID(ctx context.Context, id uuid.UUID) (GetListingByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getListingByID, id)
	var i GetListingByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Intent,
		&i.Title,
		&i.Description,
		&i.Price,
		&i.Location,
		&i.Category,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Url,
	)
	return i, err
}

const listAllListings = `-- name: ListAllListings :many
SELECT listings.id, listings.user_id, listings.intent, listings.title, listings.description, listings.price, listings.location, listings.category, listings.status, listings.created_at, listings.updated_at, listing_images.url
FROM listings
LEFT JOIN listing_images ON listings.id = images.listing_id
WHERE listings.status = 'active'
ORDER BY listings.created_at DESC
LIMIT $1 OFFSET $2
`

type ListAllListingsParams struct {
	Limit  int32
	Offset int32
}

type ListAllListingsRow struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Intent      string
	Title       string
	Description string
	Price       string
	Location    string
	Category    string
	Status      string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Url         sql.NullString
}

func (q *Queries) ListAllListings(ctx context.Context, arg ListAllListingsParams) ([]ListAllListingsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllListings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllListingsRow
	for rows.Next() {
		var i ListAllListingsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Intent,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.Location,
			&i.Category,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserListings = `-- name: ListUserListings :many
SELECT listings.id, listings.user_id, listings.intent, listings.title, listings.description, listings.price, listings.location, listings.category, listings.status, listings.created_at, listings.updated_at, listing_images.url FROM
listings
LEFT JOIN listing_images ON listings.id = listing_images.listing_id
WHERE listings.user_id = $1
ORDER BY listings.created_at DESC
`

type ListUserListingsRow struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Intent      string
	Title       string
	Description string
	Price       string
	Location    string
	Category    string
	Status      string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Url         sql.NullString
}

func (q *Queries) ListUserListings(ctx context.Context, userID uuid.UUID) ([]ListUserListingsRow, error) {
	rows, err := q.db.QueryContext(ctx, listUserListings, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserListingsRow
	for rows.Next() {
		var i ListUserListingsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Intent,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.Location,
			&i.Category,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchListings = `-- name: SearchListings :many
SELECT listings.id, listings.user_id, listings.intent, listings.title, listings.description, listings.price, listings.location, listings.category, listings.status, listings.created_at, listings.updated_at, listing_images.url
FROM listings
LEFT JOIN listing_images ON listings.id = images.listing_id
WHERE listings.location ILIKE '%' || $1 || '%'
  AND listings.category = $2
  AND listings.intent = $3
  AND listings.status = 'active'
ORDER BY listings.created_at DESC
`

type SearchListingsParams struct {
	Column1  sql.NullString
	Category string
	Intent   string
}

type SearchListingsRow struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Intent      string
	Title       string
	Description string
	Price       string
	Location    string
	Category    string
	Status      string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Url         sql.NullString
}

func (q *Queries) SearchListings(ctx context.Context, arg SearchListingsParams) ([]SearchListingsRow, error) {
	rows, err := q.db.QueryContext(ctx, searchListings, arg.Column1, arg.Category, arg.Intent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchListingsRow
	for rows.Next() {
		var i SearchListingsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Intent,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.Location,
			&i.Category,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateListingStatus = `-- name: UpdateListingStatus :exec
UPDATE listings SET status = $2 WHERE id = $1
`

type UpdateListingStatusParams struct {
	ID     uuid.UUID
	Status string
}

func (q *Queries) UpdateListingStatus(ctx context.Context, arg UpdateListingStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateListingStatus, arg.ID, arg.Status)
	return err
}
