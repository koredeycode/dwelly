// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: listings.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createListing = `-- name: CreateListing :one
INSERT INTO listings (id, user_id, intent, title, description, price_range, location, category)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, user_id, intent, title, description, price_range, location, category, status, created_at, updated_at
`

type CreateListingParams struct {
	ID          uuid.UUID
	UserID      uuid.NullUUID
	Intent      string
	Title       string
	Description sql.NullString
	PriceRange  sql.NullString
	Location    string
	Category    string
}

func (q *Queries) CreateListing(ctx context.Context, arg CreateListingParams) (Listing, error) {
	row := q.db.QueryRowContext(ctx, createListing,
		arg.ID,
		arg.UserID,
		arg.Intent,
		arg.Title,
		arg.Description,
		arg.PriceRange,
		arg.Location,
		arg.Category,
	)
	var i Listing
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Intent,
		&i.Title,
		&i.Description,
		&i.PriceRange,
		&i.Location,
		&i.Category,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getListingByID = `-- name: GetListingByID :one
SELECT id, user_id, intent, title, description, price_range, location, category, status, created_at, updated_at FROM listings WHERE id = $1
`

func (q *Queries) GetListingByID(ctx context.Context, id uuid.UUID) (Listing, error) {
	row := q.db.QueryRowContext(ctx, getListingByID, id)
	var i Listing
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Intent,
		&i.Title,
		&i.Description,
		&i.PriceRange,
		&i.Location,
		&i.Category,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllListings = `-- name: ListAllListings :many
SELECT id, user_id, intent, title, description, price_range, location, category, status, created_at, updated_at FROM listings WHERE status = 'active' ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListAllListingsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAllListings(ctx context.Context, arg ListAllListingsParams) ([]Listing, error) {
	rows, err := q.db.QueryContext(ctx, listAllListings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Listing
	for rows.Next() {
		var i Listing
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Intent,
			&i.Title,
			&i.Description,
			&i.PriceRange,
			&i.Location,
			&i.Category,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserListings = `-- name: ListUserListings :many
SELECT id, user_id, intent, title, description, price_range, location, category, status, created_at, updated_at FROM listings WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListUserListings(ctx context.Context, userID uuid.NullUUID) ([]Listing, error) {
	rows, err := q.db.QueryContext(ctx, listUserListings, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Listing
	for rows.Next() {
		var i Listing
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Intent,
			&i.Title,
			&i.Description,
			&i.PriceRange,
			&i.Location,
			&i.Category,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchListings = `-- name: SearchListings :many
SELECT id, user_id, intent, title, description, price_range, location, category, status, created_at, updated_at FROM listings
WHERE location ILIKE '%' || $1 || '%'
  AND category = $2
  AND intent = $3
  AND status = 'active'
ORDER BY created_at DESC
`

type SearchListingsParams struct {
	Column1  sql.NullString
	Category string
	Intent   string
}

func (q *Queries) SearchListings(ctx context.Context, arg SearchListingsParams) ([]Listing, error) {
	rows, err := q.db.QueryContext(ctx, searchListings, arg.Column1, arg.Category, arg.Intent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Listing
	for rows.Next() {
		var i Listing
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Intent,
			&i.Title,
			&i.Description,
			&i.PriceRange,
			&i.Location,
			&i.Category,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateListingStatus = `-- name: UpdateListingStatus :exec
UPDATE listings SET status = $2 WHERE id = $1
`

type UpdateListingStatusParams struct {
	ID     uuid.UUID
	Status sql.NullString
}

func (q *Queries) UpdateListingStatus(ctx context.Context, arg UpdateListingStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateListingStatus, arg.ID, arg.Status)
	return err
}
